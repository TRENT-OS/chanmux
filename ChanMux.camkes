/*
 *  ChanMux
 *
 *  Copyright (C) 2020, HENSOLDT Cyber GmbH
 *
 */

 #pragma once

import <std_connector.camkes>;
import <if_OS_BlockingWrite.camkes>;
import <if_ChanMux.camkes>;
import <if_OS_Logger.camkes>;

// platform specific defaults
#include "ChanMux_plat_defaults.camkes"

#include "lib_macros/ForEach.h"

//------------------------------------------------------------------------------
// Component definitions, variable arguments are a list of pairs
// (client_instance_name, channel_name) that uniquely identify a channel
#define ChanMux_COMPONENT_DEFINE(_name_, ...) \
    \
    component _name_ { \
        \
        control; \
        /*-------------------------------------------------*/ \
        /* upper interface */ \
        provides        ChanMuxDriverInf     ChanMuxRpc; \
        FOR_EACH_0FP_2VP( \
            ChanMux_DECLARE_CHANNEL_CONNECTOR, \
            __VA_ARGS__ \
        ) \
        /*-------------------------------------------------*/ \
        /* lower interface to underlying layer */ \
        uses            if_OS_BlockingWrite  underlyingChan_rpc; \
        dataport        Buf(4096)            underlyingChan_input_port; \
        dataport        Buf                  underlyingChan_output_port; \
        consumes        EventDataAvailable   underlyingChan_eventHasData; \
        /*-------------------------------------------------*/ \
        /* optional interface to log server */ \
        maybe dataport  Buf                  logServer_port; \
        maybe uses      if_OS_Logger         logServer_rpc; \
        attribute       int                  log_lvl; \
    }


//------------------------------------------------------------------------------
// Interface definitions and connections

#define ChanMux_DECLARE_CHANNEL_CONNECTOR(_inst_client_, _chan_name_) \
    dataport  Buf                 _inst_client_ ##_## _chan_name_ ##_## portRead; \
    dataport  Buf                 _inst_client_ ##_## _chan_name_ ##_## portWrite; \
    emits     DataAvailableEvent  _inst_client_ ##_## _chan_name_ ##_## eventHasData;

#define ChanMux_CLIENT_DECLARE_CHANNEL_CONNECTOR(_inst_chanmux, _chan_name_) \
    dataport    Buf                 _inst_chanmux ##_## _chan_name_ ##_## portRead; \
    dataport    Buf                 _inst_chanmux ##_## _chan_name_ ##_## portWrite; \
    consumes    DataAvailableEvent  _inst_chanmux ##_## _chan_name_ ##_## eventHasData;

#define ChanMux_CLIENT_DECLARE_INTERFACE(_inst_chanmux) \
    uses        ChanMuxDriverInf    _inst_chanmux ## _Rpc;

#define ChanMux_INSTANCE_CONNECT_INTERFACE(_inst_chanmux, _inst_client_) \
    connection seL4RPCCall _inst_client_ ##_## _inst_chanmux ##_## rpc( \
        from    _inst_client_.chanMux_Rpc, \
        to      _inst_chanmux.ChanMuxRpc);

#define ChanMux_CLIENT_ASSIGN_BADGE(_chanmux_inst_, _inst_client_, _badge_value_) \
    _inst_client_._chanmux_inst_ ## _Rpc_attributes = _badge_value_;

#define ChanMux_INSTANCE_CONNECT_CHANNEL(_inst_chanmux, _inst_client_, _chan_name_, _dummy_) \
    connection seL4SharedData _inst_client_ ##_## _inst_chanmux ##_## _chan_name_ ##_## portWrite( \
        from    _inst_client_.chanMux ##_## _chan_name_ ##_## portWrite, \
        to      _inst_chanmux._inst_client_ ##_## _chan_name_ ##_## portWrite); \
    connection  seL4SharedData _inst_client_ ##_## _inst_chanmux ##_## _chan_name_ ##_## portRead ( \
        from    _inst_client_.chanMux ##_## _chan_name_ ##_## portRead, \
        to      _inst_chanmux._inst_client_ ##_## _chan_name_ ##_## portRead); \
    connection  seL4NotificationNative _inst_chanmux ##_## _inst_client_ ##_## _chan_name_ ##_## notification( \
        from    _inst_chanmux._inst_client_ ##_## _chan_name_ ##_## eventHasData, \
        to      _inst_client_.chanMux ##_## _chan_name_ ##_## eventHasData);

//------------------------------------------------------------------------------
// ChanMux canbe running on top of a UART

#if defined(ChanMux_on_UART)

#include "UART/Uart.camkes"

#define ChanMux_INSTANCE_CONNECT(_inst_, _uart_inst_) \
    UART_INSTANCE_CONNECT_CLIENT(\
        _uart_inst_,\
        _inst_.underlyingChan_rpc,\
        _inst_.underlyingChan_input_port,\
        _inst_.underlyingChan_output_port,\
        _inst_.underlyingChan_eventHasData)

#endif //defined(ChanMux_on_UART)

#define ChanMux_INSTANCE_CONNECT_CLIENT(_inst_, _client_inst_, ...) \
    ChanMux_INSTANCE_CONNECT_INTERFACE(_inst_, _client_inst_) \
    FOR_EACH_1P(ChanMux_INSTANCE_CONNECT_CHANNEL, _inst_, _client_inst_, __VA_ARGS__)

//------------------------------------------------------------------------------
// multi instance helpers

#define ChanMux_CLIENT_ASSIGN_BADGES(...) \
    FOR_EACH_1FP_2VP(ChanMux_CLIENT_ASSIGN_BADGE, __VA_ARGS__)
